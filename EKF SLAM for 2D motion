{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "ef2ac841",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2D efk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c991b714",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "0129b2c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(xest,u,P):\n",
    "    w=float(u[1])\n",
    "    U=np.array([[DT*math.cos(xest[2,0]+w*0.5*DT),0],\n",
    "                [DT*math.sin(xest[2,0]+w*0.5*DT),0],\n",
    "                [0,DT]])\n",
    "    xest=xest+U@u\n",
    "    v=float(u[0])\n",
    "    G=np.array([[1,0,-DT*(v)*math.sin(xest[2,0]+w*0.5*DT)],[0,1,DT*(v)*math.cos(xest[2,0]+w*0.5*DT)],[0,0,1]])\n",
    "    P=G@P@(G.T)+Cx\n",
    "    return xest,P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "a925626c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def measurement(x,m):\n",
    "    mx=m[0]-x[0]\n",
    "    my=m[1]-x[1]\n",
    "    mt=math.atan2(my,mx)\n",
    "    return mx,my,mt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "25921395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time=0.0\n",
    "STATE_SIZE=3\n",
    "DT=0.1\n",
    "Cx=np.diag([0.5, 0.5, np.deg2rad(30.0)])**2\n",
    "m=np.array([[10.0, -2.0],[15.0, 10.0],[3.0, 11.0],[-5.0, 20.0]])\n",
    "P=np.zeros((STATE_SIZE,STATE_SIZE))\n",
    "u=np.array([[1.],[0.1]])\n",
    "xtrue=np.zeros((STATE_SIZE,1))\n",
    "xest=np.zeros((STATE_SIZE,1))\n",
    "hxtrue=xtrue\n",
    "hxest=xest\n",
    "while 50>=time:\n",
    "    time+=DT\n",
    "    n=math.floor(xest[2,0]/(2*math.pi))\n",
    "    xest[2,0]-=(2*math.pi*n)\n",
    "    xest,P=predict(xest,u,P)\n",
    "    theta=xest[2,0]\n",
    "    w=float(u[1])\n",
    "    U=np.array([[DT*math.cos(theta+w*0.5*DT),0],\n",
    "                [DT*math.sin(theta+w*0.5*DT),0],\n",
    "                [0,DT]])\n",
    "    xtrue=xtrue+U@u\n",
    "    n=math.floor(xtrue[2,0]/(2*math.pi))\n",
    "    xtrue[2,0]-=(2*math.pi*n)\n",
    "    for i in range(len(m)):\n",
    "        mx,my,mt=measurement(xest,m[i])\n",
    "        tmx,tmy,tmt=measurement(xtrue,m[i])\n",
    "        q=float(mx**2+my**2)\n",
    "        zest=np.array([[float(q**0.5)],[mt-float(xest[2])],[0]])\n",
    "        H=np.array([[float(-mx/(q**0.5)),float(-my/(q**0.5)),0],[float(my/q),float(-mx/q),-1],[0,0,0]])\n",
    "        S=H@P@H.T+Cx\n",
    "        K=P@H.T@(np.linalg.inv(S))\n",
    "        z=np.array([[float((tmx**2+tmy**2)**0.5)],[tmt-float(xtrue[2])],[0]])\n",
    "        xest=xest+K@(z-zest)\n",
    "        P=(np.eye(STATE_SIZE)-K@H)@P\n",
    "        plt.plot(m[i][0],m[i][1],\"xg\")\n",
    "    hxtrue=np.hstack((hxtrue,xtrue))\n",
    "    v=xest[0:STATE_SIZE]\n",
    "    hxest = np.hstack((hxest, v))\n",
    "    plt.plot(hxtrue[0, :], hxtrue[1, :], \"-b\")\n",
    "    plt.plot(hxest[0, :], hxest[1, :], \"-r\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1ab030a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
